#+title: Code ToDo

* [ ] Graph
** [ ] Rename output to be outcome
** [ ] Refactor NodeExecution input_messages and messages:
- Merge them together and populate messages with input message?
- Executors should append their result to messages
** [ ] Add a way to override values from a shared config. Options:
- Through special value
- Though path in the settings of <tool_name.node_name.field_name> syntax
- Both?
- Also read from files when file is defined
** [ ] Add a way to get node definition from template and override some of the fields from config
** [X] Graph runner
** [X] Streamline node transition - if there's nowhere to proceed, do not ask for input with need_input
** [ ] Add a flag if node might need user input or not
** [ ] There's no difference between input and messages for NodeExecution
* [ ] Settings
** [ ] Settings loader
* [ ] Chat state
** [X] NodeLog, Section, Message
* [ ] UI protocol
** [ ] General requirements
- Authentication
- Send initial configuration: available tools, their node configuration, etc.
- Stream state change messages
- RPC subprotocol for various helpers
  - Request user input and provide response
  - Tab-based autocompletion
  - Send ctrl+c
** [ ] Clearly defined spec
** [ ] In-memory bidirectional stream implementation for TUI
** [ ] Websockets implementation
* [ ] Nodes
** [ ] Think how to manage state for a run
- Sometimes we need to maintain the state when additional information is found and added to state
- Sometimes we need to start fresh
- But need to maintain state if looped by human
- Most likely make it a setting of a Node (explicit config). Via enum?
  - Always resets
  - Human resets
  - Never resets
- We need machinery to go back in time and reset graph execution to a specific history
** [X] Base node runner class
** [ ] LLM node
*** [X] Base
**** [X] Tool configuration
*** [ ] Dynamic output selection by LLM
**** [ ] Configurable system prompt extension
**** [ ] Cleanup logic
**** [ ] Re-prompt if answer is not provided
**** [ ] Add non-function way of picking next step
*** [ ] Do not add empty message to output
*** [ ] Auto-retry on timeout
*** [ ] Auto-retry when throttled
** [ ] Fan-out node - call other defined tools, collect their results and pass concatenated messages to next tool
** [ ] TODO node - collect plan that is formatted with specific syntax (markdown? function call?)
* [ ] Block parsers
** [ ] Message construction helpers
** [ ] Code parsers
** [ ] Diff parsers
*** [ ] GPT diff format
*** [ ] Fenced diff format
*** [ ] Full file diff format
